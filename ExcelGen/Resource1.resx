<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ClassTemplete" xml:space="preserve">
    <value>using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml.Linq;

namespace ExcelTables
</value>
  </data>
  <data name="ScriptBase" xml:space="preserve">
    <value>public class IScriptTableBase
    {
    }

    public class ExcelIndexAttribute : Attribute
    {

    }

    /// &lt;summary&gt;
    /// 配置文件类基类
    /// &lt;/summary&gt;
    /// &lt;typeparam name="T"&gt;子类类型&lt;/typeparam&gt;
    /// &lt;typeparam name="U"&gt;索引类型&lt;/typeparam&gt;
    public class ScriptTableBase&lt;T,U&gt; : IScriptTableBase
        where T : ScriptTableBase&lt;T,U&gt;, new()
    {
        private static T _Instance = null;
        /// &lt;summary&gt;
        /// 静态调用实例
        /// &lt;/summary&gt;
        public static T Instance
        {
            get
            {
                if(_Instance == null)
                {
                    _Instance = new T();
                }
                return _Instance;
            }
        }
        private Dictionary&lt;U, T&gt; _Tables = null;
        /// &lt;summary&gt;
        /// 静态配置字典
        /// &lt;/summary&gt;
        public Dictionary&lt;U, T&gt; Tables
        {
            get
            {
                if(_Tables == null)
                {
                    _Tables = new Dictionary&lt;U, T&gt;();
                }
                return _Tables;
            }
        }

        /// &lt;summary&gt;
        /// 添加数据到Table字典中
        /// &lt;/summary&gt;
        /// &lt;param name="table"&gt;&lt;/param&gt;
        public virtual void Add(T table)
        {
            var props = typeof(T).GetProperties();
            PropertyInfo indexProp = null;
            foreach(var p in props)
            {
                if(p.PropertyType != typeof(U))
                {
                    continue;
                }
                foreach(var pAttr in p.GetCustomAttributes(typeof(ExcelIndexAttribute), true))
                {
                    indexProp = p;
                    break;
                }
                if(indexProp != null)
                {
                    break;
                }
            }
            if(indexProp != null)
            {
                var indexValue = indexProp.GetValue(table, null);
                Tables.Add((U)indexValue, table);
            }
        }

        /// &lt;summary&gt;
        /// 从Table中获取数据
        /// &lt;/summary&gt;
        /// &lt;param name="Index"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public virtual T Get(U Index)
        {
            if (Tables.ContainsKey(Index))
            {
                return Tables[Index];
            }
            return default(T);
        }

        /// &lt;summary&gt;
        /// 加载配置文件
        /// &lt;/summary&gt;
        /// &lt;param name="fileName"&gt;&lt;/param&gt;
        public virtual void LoadTable(string fileName)
        {
            Tables.Clear();
            var xRoot = XElement.Load(fileName);
            foreach(var xTable in xRoot.Elements())
            {
                try
                {
                    T table = LoadTableFromXmlNode(xTable);
                    Add(table);
                }
                catch (Exception ex)
                {
                    Exception propException = new Exception(
                        string.Format("TableType=[{0}], fileName = {1}", typeof(T), fileName), ex);
                    throw propException;
                }
            }
        }
		
		public virtual void LoadTableFromXML(string xmlData)
        {
            Clear();
            var xRoot = System.Xml.Linq.XElement.Parse(xmlData);
            foreach(var xTable in xRoot.Elements())
            {
                T table = LoadTableFromXmlNode(xTable);
                Add(table);
            }
        }
		
		public virtual void Clear()
		{
			Tables.Clear();
		}

        protected T LoadTableFromXmlNode(XElement xEle)
        {
            var type = typeof(T);
            var propList = type.GetProperties();
            T objTable = new T();
            foreach(var pro in propList)
            {
                try
                {
                    if (pro.PropertyType.IsGenericType)
                    {
                        var propName = pro.Name;
                        if (propName.EndsWith("List"))
                        {
                            propName = propName.Substring(0, propName.Length - 4);
                        }
                        var xProp = xEle.Element(propName);
                        if (xProp != null)
                        {
                            var v = GetXmlListObject(xProp, pro);
                            pro.SetValue(objTable, v);
                        }
                    }
                    else
                    {
                        var xProp = xEle.Element(pro.Name);
                        if (xProp != null)
                        {
                            var sValue = xProp.Value;
                            object v = Convert.ChangeType(sValue, pro.PropertyType);
                            pro.SetValue(objTable, v);
                        }
                    }
                }
                catch(Exception ex)
                {
                    Exception propException = new Exception(
                        string.Format("TableType=[{0}], PropName = [{1}], xml = [{2}]", typeof(T), pro.Name, xEle.ToString()), ex);
                    throw propException;
                }
            }
            return objTable;
        }

        private object GetXmlListObject(XElement xProp, PropertyInfo propInfo)
        {
            var genericArgv = propInfo.PropertyType.GetGenericArguments()[0];
            var obj = Activator.CreateInstance(propInfo.PropertyType);
            var addMethod = propInfo.PropertyType.GetMethod("Add");
            if (genericArgv.IsPrimitive || genericArgv.Name == typeof(string).Name)
            {
                // 基础类型
                foreach (var subNode in xProp.Elements())
                {
                    var s = subNode.Value;
                    object v = Convert.ChangeType(s, genericArgv);
                    addMethod.Invoke(obj, new object[] { v });
                }
            }
            else
            {
                // 非基础类型
                foreach(var subNode in xProp.Elements())
                {
                    var objSub = Activator.CreateInstance(genericArgv);
                    var objSubProps = objSub.GetType().GetProperties();
                    foreach(var subObjProp in objSubProps)
                    {
                        var s = subNode.Element(subObjProp.Name);
                        if(s != null)
                        {
                            object v = Convert.ChangeType(s.Value, subObjProp.PropertyType);
                            subObjProp.SetValue(objSub, v, null);
                        }
                    }

                    addMethod.Invoke(obj, new object[] { objSub });
                }
            }
            return obj;
        }
    }

    public class AutoLoadConfig
    {
        public AutoLoadConfig()
        {
            TableConfigTypeList = new Dictionary&lt;string, Type&gt;();
            RegistryAssembly(typeof(AutoLoadConfig).Assembly);
        }

        private static AutoLoadConfig _Instance = null;
        public static AutoLoadConfig Instance
        {
            get
            {
                if(_Instance == null)
                {
                    _Instance = new AutoLoadConfig();
                }
                return _Instance;
            }
        }

        private Dictionary&lt;string ,Type&gt; TableConfigTypeList = null; 

        public void RegistryAssembly(Assembly asm)
        {
            var types = asm.GetTypes();
            foreach(var type in types)
            {
                if(type.IsSubclassOf(typeof(IScriptTableBase)) &amp;&amp; !type.Name.StartsWith("ScriptTableBase"))
                {
                    if(!TableConfigTypeList.ContainsKey(type.AssemblyQualifiedName))
                    {
                        TableConfigTypeList.Add(type.AssemblyQualifiedName, type);
                    }
                }
            }
        }

        public void LoadConfig(string strFolder)
        {
            foreach(var typeKV in TableConfigTypeList)
            {
                var instanceProp = typeKV.Value.GetProperty("Instance", BindingFlags.Static | BindingFlags.Public );
                if (instanceProp != null)
                {
                    var instance = instanceProp.GetValue(null, null);

                    var xmlProp = typeKV.Value.GetProperty("XMLFile", BindingFlags.Instance | BindingFlags.Public);
                    string xmlName = "";
                    if(xmlProp != null)
                    {
                        xmlName = xmlProp.GetValue(instance, null).ToString();
                    }
                    else
                    {
                        xmlName = typeKV.Value.Name + ".xml";
                    }

                    var xmlFileName = strFolder.TrimEnd('\\') + "\\" + xmlName ;
                    var loadTableMethod = typeKV.Value.GetMethod("LoadTable");
                    if (instance != null &amp;&amp; loadTableMethod != null)
                    {
                        loadTableMethod.Invoke(instance, new object[] { xmlFileName });
                    }
                }
            }
        }
    }</value>
  </data>
</root>